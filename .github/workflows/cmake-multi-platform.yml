# .github/workflows/cmake.yml
name: CMake Build & Test (Quick-Ai)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      # Test on Ubuntu (Linux) and Windows
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release] # Use 'Debug' or 'RelWithDebInfo' to test other build types

        # Define the compiler to use for each OS
        # On Ubuntu, we will run once with GCC and once with Clang
        # On Windows, we use the default MSVC compiler (cl)
        c_compiler: [gcc, clang, cl]

        # Configure which compiler runs on which OS
        include:
          - os: windows-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang

        # Exclude invalid combinations (e.g., running GCC on Windows)
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Define the common build directory name
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Meson
        run: pip install meson

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpsl-dev libbrotli-dev libnghttp2-dev libidn2-dev libunistring-dev

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Setup MSVC Developer Command Prompt (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake (Windows, with Tests)
        if: runner.os == 'Windows'
        shell: powershell # Explicitly set the shell to PowerShell
        run: |
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}
          cmake -G Ninja -B ${{ steps.strings.outputs.build-output-dir }} `
             -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
             -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
             -DQA_BUILD_TESTS=ON `
             -DQA_BUILD_UI=OFF `
             -S ${{ github.workspace }}

      - name: Configure CMake (Linux, with Tests)
      # This step runs on Linux (where the shell is bash)
        if: runner.os == 'Linux'
        shell: bash # Explicitly set the shell to Bash (optional, but clearer)
        run: |
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
             -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
             -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
             -DQA_BUILD_TESTS=ON \
             -DQA_BUILD_UI=OFF \
             -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test (Test Quick-Ai)
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Use CTest to run the specific test target
        # We use --build-config for multi-config generators (like on Windows)
        run: ctest --build-config ${{ matrix.build_type }} -R qalib-test